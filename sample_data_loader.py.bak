# ...existing code...
import random
import uuid
from datetime import datetime
from neo4j_connector import Neo4jConnector

def load_sample_data(num_traces=200):
    neo = Neo4jConnector(password="testpassword123")
    agents = ["Reader", "Validator", "ERP", "Communicator"]
    workflow_id = "workflow_demo"

    # ensure Workflow and Agent nodes exist
    if getattr(neo, "driver", None) is not None:
        with neo.driver.session() as session:
            session.run("MERGE (w:Workflow {id:$workflow_id})", workflow_id=workflow_id)
            for a in agents:
                session.run("MERGE (ag:Agent {id:$id, name:$name})", id=a, name=a)
            # entry link
            session.run("""
                MATCH (w:Workflow {id:$workflow_id}), (a:Agent {id:$entry})
                MERGE (w)-[:CAN_HANDLE]->(a)
            """, workflow_id=workflow_id, entry=agents[0])

    for t in range(num_traces):
        trace_id = str(uuid.uuid4())
        step = 0
        current = "Reader"
        while current:
            step += 1
            status = "success" if random.random() > 0.05 else "failed"
            details = {"step": step, "trace_index": t, "ts": datetime.utcnow().isoformat()}
            # connector signature: (trace_id, workflow_id, agent_id, status, details)
            try:
                neo.save_execution_trace(trace_id, workflow_id, current, status, details)
            except Exception:
                # fall back to logging if connector method differs
                try:
                    neo.log_event("trace", f"{trace_id}:{current}:{step}", details)
                except Exception:
                    pass

            # occasionally simulate a tool call and a tool execution record
            if random.random() < 0.25:
                tool_name = random.choice(["API_Tool", "RPA_Tool", "DB_Tool"])
                tool_details = {"tool": tool_name, "latency_ms": random.randint(10,500), "ok": status=="success"}
                # if connector provides a tool execution save method use it, otherwise log event
                if hasattr(neo, "save_tool_execution"):
                    try:
                        neo.save_tool_execution(trace_id, current, tool_name, tool_details)
                    except Exception:
                        pass
                else:
                    try:
                        neo.log_event("tool_execution", f"{tool_name} on {current}", tool_details)
                    except Exception:
                        pass

            # occasionally create a Decision node
            if random.random() < 0.12:
                decision_id = str(uuid.uuid4())
                try:
                    neo.save_decision(
                        decision_id=decision_id,
                        agent=current,
                        step=step,
                        recommendation=random.choice(["use_api","use_rpa","manual_review"]),
                        tools=["API_Tool"] if random.random() < 0.7 else ["RPA_Tool"],
                        stats=[{"tool":"API_Tool","score":random.random()}],
                        explanations={"note": f"auto decision at step {step}"},
                        severity=random.choice(["low","medium","high"]),
                        status="pending"
                    )
                except Exception:
                    try:
                        neo.log_event("decision", "created decision", {"id": decision_id, "agent": current})
                    except Exception:
                        pass

            # choose next
            if current == "Reader":
                next_agent = "Validator"
            elif current == "Validator":
                next_agent = random.choices(["ERP", "Communicator"], weights=[0.7,0.3])[0]
            elif current == "ERP":
                next_agent = random.choices(["Communicator", None], weights=[0.4,0.6])[0]
            else:
                next_agent = None

            # ensure NEXT relationship exists (small probability)
            if getattr(neo, "driver", None) is not None and next_agent:
                try:
                    with neo.driver.session() as session:
                        session.run("""
                            MATCH (a:Agent {id:$from_agent}), (b:Agent {id:$to_agent})
                            MERGE (a)-[r:NEXT]->(b)
                            ON CREATE SET r.probability = coalesce(r.probability, 0.1)
                        """, from_agent=current, to_agent=next_agent)
                except Exception:
                    pass

            current = next_agent

        # occasional fallback
        if random.random() < 0.2:
            src = random.choice(agents)
            dst = random.choice([a for a in agents if a != src])
            try:
                neo.add_fallback_edge(src, dst, similarity_score=round(random.random(),2))
            except Exception:
                pass

    neo.close()

if __name__ == "__main__":
    load_sample_data(500)
    print("Sample dataset loaded into Neo4j.")
# ...existing code...